# encoding: utf-8
#
# integer keys
sql("insert into t2 values (1, 'tuple')")
admin("save snapshot")
sql("insert into t2 values (2, 'tuple 2')")
admin("save snapshot")

sql("insert into t2 values (3, 'tuple 3')")
sql("select * from t2 where k0 = 1")
sql("select * from t2 where k0 = 2")
sql("select * from t2 where k0 = 3")

# Cleanup
sql("delete from t2 where k0 = 1")
sql("delete from t2 where k0 = 2")
sql("delete from t2 where k0 = 3")

# Test incorrect keys - supplied key field type does not match index type
# https://bugs.launchpad.net/tarantool/+bug/1072624
sql("insert into t2 VALUES('xxxxxxx')")
sql("insert into t2 VALUES('')")
sql("insert into t2 VALUES('12')")

# string keys
sql("insert into t3 values ('identifier', 'tuple')")
admin("save snapshot")
sql("insert into t3 values ('second', 'tuple 2')")
admin("save snapshot")
sql("call box.select_range('3', '0', '100', 'second')")
sql("call box.select_range('3', '0', '100', 'identifier')")

sql("insert into t3 values ('third', 'tuple 3')")
sql("select * from t3 where k0 = 'identifier'")
sql("select * from t3 where k0 = 'second'")
sql("select * from t3 where k0 = 'third'")

# Cleanup
sql("delete from t3 where k0 = 'identifier'")
sql("delete from t3 where k0 = 'second'")
sql("delete from t3 where k0 = 'third'")
lua = """
function box.crossjoin(space0, space1, limit)
  space0 = tonumber(space0)
  space1 = tonumber(space1)
  limit = tonumber(limit)
  local result = {}
  for k0, v0 in box.space[space0]:pairs() do
    for k1, v1 in box.space[space1]:pairs() do
      if limit <= 0 then
        return unpack(result)
      end
      newtuple = {v0:unpack()}
      for _, v in v1:pairs() do table.insert(newtuple, v) end
      table.insert(result, newtuple)
      limit = limit - 1
    end
  end
  return unpack(result)
end"""
sql("insert into t2 values (1, 'tuple')")
sql("insert into t3 values (1, 'tuple')")
sql("insert into t3 values (2, 'tuple')")
admin(lua.replace('\n', ' ')) 
sql("call box.crossjoin('3', '3', '0')")
sql("call box.crossjoin('3', '3', '5')")
sql("call box.crossjoin('3', '3', '10000')")
sql("call box.crossjoin('3', '2', '10000')")
admin("box.space[3]:truncate()")

# Bug #922520 - select missing keys
sql("insert into t2 values (200, 'select me!')")
sql("select * from t2 where k0 = 200")
sql("select * from t2 where k0 = 199")
sql("select * from t2 where k0 = 201")

# Test partially specified keys in TREE indexes
sql("insert into t15 values ('abcd')")
sql("insert into t15 values ('abcda')")
sql("insert into t15 values ('abcda_')")
sql("insert into t15 values ('abcdb')")
sql("insert into t15 values ('abcdb_')")
sql("insert into t15 values ('abcdb__')")
sql("insert into t15 values ('abcdb___')")
sql("insert into t15 values ('abcdc')")
sql("insert into t15 values ('abcdc_')")
admin("box.space[15].index[0]:select_range(3, 'abcdb')")
admin("box.space[15]:truncate()")

#
# tree::replace tests
#

admin("box.space[22]:truncate()")

sql("insert into t22 values (0, 0, 0, 0)")
sql("insert into t22 values (1, 1, 1, 1)")
sql("insert into t22 values (2, 2, 2, 2)")

# OK
sql("replace into t22 values (1, 1, 1, 1)")
sql("replace into t22 values (1, 10, 10, 10)")
sql("replace into t22 values (1, 1, 1, 1)")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")
sql("select * from t22 WHERE k0 = 1")
sql("select * from t22 WHERE k1 = 1")
sql("select * from t22 WHERE k2 = 1")
sql("select * from t22 WHERE k3 = 1")

# OK
sql("insert into t22 values (10, 10, 10, 10)")
sql("delete from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")


# TupleFound (primary key)
sql("insert into t22 values (1, 10, 10, 10)")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")
sql("select * from t22 WHERE k0 = 1")

# TupleNotFound (primary key)
sql("replace into t22 values (10, 10, 10, 10)")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")

# TupleFound (key #1)
sql("insert into t22 values (10, 0, 10, 10)")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")
sql("select * from t22 WHERE k1 = 0")

# TupleFound (key #1)
sql("replace into t22 values (2, 0, 10, 10)")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")
sql("select * from t22 WHERE k1 = 0")

# TupleFound (key #3)
sql("insert into t22 values (10, 10, 10, 0)")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")
sql("select * from t22 WHERE k3 = 0")

# TupleFound (key #3)
sql("replace into t22 values (2, 10, 10, 0)")
sql("select * from t22 WHERE k0 = 10")
sql("select * from t22 WHERE k1 = 10")
sql("select * from t22 WHERE k2 = 10")
sql("select * from t22 WHERE k3 = 10")
sql("select * from t22 WHERE k3 = 0")

sql.sort = True
# Non-Uniq test (key #2)
sql("insert into t22 values (4, 4, 0, 4)")
sql("insert into t22 values (5, 5, 0, 5)")
sql("insert into t22 values (6, 6, 0, 6)")
sql("replace into t22 values (5, 5, 0, 5)")
sql("select * from t22 WHERE k2 = 0")
sql("delete from t22 WHERE k0 = 5")
sql("select * from t22 WHERE k2 = 0")
sql.sort = False

admin("box.space[22]:truncate()")

