<!DOCTYPE section [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="dynamic-data-model">
<title>Dynamic data model</title>
<para>
  Tarantool data is organized in <emphasis>tuples</emphasis>. Tuple
  length is varying: a tuple can contain any number
  of fields. A field can be either numeric &mdash;
  32- or 64- bit unsigned integer, or binary
  string &mdash; a sequence of octets.
  Tuples are stored and retrieved by means of indexing. An index
  can cover one or multiple fields, in any order. Fields included
  into the first index are always assumed to be the identifying
  (unique) key. The remaining fields make up a value, associated
  with the key. 
</para>
<para>
  Apart from the primary key, it is possible to define secondary
  <emphasis>indexes</emphasis> on other tuple fields.

  A secondary index does not have to be unique and can cover
  multiple fields. The total number of fields in a tuple must be
  at least equal to the ordinal number of the last field
  participating in any index.
</para>
<para>
  Supported index types are HASH, TREE and BITSET. HASH
  index is the fastest one, with smallest memory footprint.
  TREE index, in addition to key/value look ups, support partial
  key lookups, key-part lookups for multipart keys and ordered
  retrieval. BITSET indexes, while can serve as a standard unique
  key, are best suited for bit-pattern look-ups, i.e. search for
  objects satisfying multiple properties.
</para>
<para>
  Tuple sets together with defined indexes form
  <emphasis>spaces<alt>the paradigm of tuples and spaces is
  derived from distributed computing</alt></emphasis>.

  The basic server operations are insert, replace, delete,
  update, which modify a tuple in a space, and select,
  which retrieves tuples from a space. All operations that modify
  data require the primary key for look up. Select, however, may
  use any index.
 </para>
 <para>
 A Lua stored procedure can combine multiple
  trivial commands, as well as access data using <olink
  targetptr="box.index.iterator">index iterators</olink>. Indeed,
  the iterators provide full access to the power of indexes,
  enabling index-type specific access, such as boolean expression
  evaluation for BITMAP indexes, or reverse range retrieval for
  TREEs.
</para>
<para>
  All operations in Tarantool are atomic and durable: they are
  either executed and written to the write ahead log or rolled back.
  A stored procedure, containing a combination of basic operations,
  holds a consistent view of the database as long as it doesn't 
  incur writes to the write ahead log or to network. In particular,
  a select followed by an update or delete is atomic. 
</para>
<para>
  While the subject of each data changing command is a
  single tuple, an update may modify one or more tuple fields, as
  well as add or delete fields, all in one command. It thus
  provides an alternative way to achieve multi-operation
  atomicity.
</para>
<para>
  Currently, entire server <emphasis>schema</emphasis> must be
  specified in the configuration file. The schema contains all
  spaces and indexes. A server started with a configuration
  file that doesn't match contents of its data directory will most
  likely crash, but may also behave in a non-defined way. 
  It is, however, possible to stop the server,
  add new spaces and indexes to the schema or temporarily disable
  existing spaces and indexes, and then restart the server.
</para>
<para>
  Schema objects, such as spaces and indexes, are referred to
  by a numeric id. For example, to insert a tuple, it is necessary
  to provide id of the destination space; to select
  a tuple, one must provide the identifying key, space id and
  index id of the index used for lookup. Many Tarantool drivers
  provide a local aliasing scheme, mapping numeric identifiers
  to names. Use of numeric identifiers on the wire protocol
  makes it lightweight and easy to parse.
</para>

<para>
  The configuration file shipped with the binary package defines
  only one space with id <literal>0</literal>. It has no keys
  other than the primary. The primary key numeric id is also 
  <literal>0</literal>. Tarantool command line client
  supports a small subset of SQL, and it'll be used to
  demonstrate supported data manipulation commands:
  <programlisting>
  localhost> insert into t0 values (1)
  Insert OK, 1 row affected
  localhost> select * from t0 where k0=1
  Found 1 tuple:
  [1]
  localhost> insert into t0 values ('hello')
  An error occurred: ER_ILLEGAL_PARAMS, 'Illegal parameters'
  localhost> replace into t0 values (1, 'hello')
  Replace OK, 1 row affected
  localhost> select * from t0 where k0=1 
  Found 1 tuple:
  [1, 'hello']
  localhost> update t0 set k1='world' where k0=1
  Update OK, 1 row affected
  localhost> select * from t0 where k0=1
  Found 1 tuple:
  [1, 'world']
  localhost> delete from t0 where k0=1
  Delete OK, 1 row affected
  localhost> select * from t0 where k0=1
  No match</programlisting>

  <itemizedlist>
    <title>Please observe:</title>
    <listitem><para>
      Since all object identifiers are numeric, Tarantool SQL subset
      expects identifiers that end with a number (<literal>t0</literal>,
      <literal>k0</literal>, <literal>k1</literal>, and so on):
      this number is used to refer to the actual space or
      index.
    </para></listitem>
    <listitem><para>
       All commands actually tell the server which key/value pair
       to change. In SQL terms, that means that all DML statements
       must be qualified with the primary key. WHERE clause
       is, therefore, mandatory.
    </para></listitem>
    <listitem><para>
       REPLACE replaces data when a
       tuple with given primary key already exists. Such replace
       can insert a tuple with a different number of fields.
    </para></listitem>
  </itemizedlist>
</para>
<para>
  Additional examples of SQL statements can be found in <citetitle
  xlink:href="https://github.com/tarantool/tarantool/tree/master/test/box"
  xlink:title="Tarantool regression test suite">Tarantool
  regression test suite</citetitle>. A complete grammar of
  supported SQL is provided in <olink targetdoc="tarantool-user-guide" targetptr="language-reference">Language reference</olink> chapter.
</para>
<para>
  Since not all Tarantool operations can be expressed in SQL, to gain
  complete access to data manipulation functionality one must use
  a <olink targetptr="connectors">Perl, Python, Ruby or other
  programming language connector</olink>.  The client/server
  protocol is open and documented: an annotated BNF can be found
  in the source tree, file <filename
  xlink:href="https://github.com/tarantool/tarantool/blob/master/doc/box-protocol.txt" xlink:title="A complete BNF of Tarantool client/server protocol">doc/protocol.txt</filename>.
</para>

</section>
<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
